{"version":3,"sources":["Atom.ts","components/CreateToDo.tsx","components/CreateCategory.tsx","components/Header.tsx","components/ToDoListPresent.tsx","components/RecoilToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["cateList","atom","key","default","atomToDoList","nowCategory","selectedList","selector","get","selectedCategory","filter","todo","category","ErrMsg","styled","span","Form","form","CreateToDo","useForm","register","errors","formState","handleSubmit","reset","categoryList","useRecoilValue","useRecoilState","toDoList","setToDoList","setSelectedCategory","onSubmit","data","temptToDoList","JSON","parse","stringify","unshift","toDo","id","Number","Date","oldToDoList","localStorage","setItem","onInput","event","value","currentTarget","map","cate","idx","type","required","message","Title","h1","CreateCategory","sCateList","setCateList","oldList","newCategory","tmpCategoryList","saveLocalStorage","placeholder","HeaderWrap","header","button","props","disabled","Header","sNowCategory","ToDoListWrap","ul","ToDo","li","Button","ButtonWrap","div","ToDoListPresent","showList","item","onClick","aId","aCategory","tempToDoList","matchIndex","findIndex","changedToDo","splice","onClickChangeCategory","Container","RecoilToDoList","useSetRecoilState","getItem","GlobalStyle","createGlobalStyle","theme","bgColor","App","ReactDOM","render","StrictMode","textColor","document","getElementById"],"mappings":"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","file":"static/js/main.a80d3406.chunk.js","sourcesContent":["import { atom, selector } from 'recoil'\n// export enum Categories {\n//     'TO_DO' = 'TO_DO',\n//     'DOING' = 'DOING',\n//     'DONE' = 'DONE'\n// }\nexport interface IForm {\n    toDo: string\n    id: number\n    category: string\n}\n\nexport const cateList = atom<string[]>({\n    key: 'cateList',\n    default: []\n})\n\nexport const atomToDoList = atom<IForm[]>({\n    key: 'ToDoList',\n    default: []\n})\n\nexport const nowCategory = atom<IForm['category']>({\n    key: 'category',\n    default: 'TO_DO'\n})\n\nexport const selectedList = selector({\n    key: 'categoryList',\n    get: ({ get }) => {\n        const selectedCategory = get(nowCategory)\n        return get(atomToDoList).filter(\n            todo => todo.category === selectedCategory\n        )\n    }\n})\n\nexport const leftCategory = selector({\n    key: 'leftCategory',\n    get: ({ get }) => {\n        /* < 가 보일 때는 DONE과 DOING일 경우이다. */\n        return get(nowCategory) === 'DONE' ? 'DOING' : 'TO_DO'\n    }\n})\n\nexport const rightCategory = selector({\n    key: 'rightCategory',\n    get: ({ get }) => {\n        // >가 보일 때는 TODO와 DOING이다.\n        return get(nowCategory) === 'TO_DO' ? 'DOING' : 'DONE'\n    }\n})\n","import { useForm } from 'react-hook-form'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport styled from 'styled-components'\nimport { atomToDoList, cateList, IForm, nowCategory } from '../Atom'\n\nexport const ErrMsg = styled.span`\n    width: 100%;\n    color: #fc427b;\n    text-align: center;\n    font-size: 20px;\n`\n// const Button = styled.button`\n//     height: 30px;\n//     background-color: transparent;\n//     font-size: 20px;\n//     color: black;\n// `\n// const Select = styled.select`\n//     background-color: transparent;\n//     outline: none;\n//     border: none;\n//     color: black;\n// `\nexport const Form = styled.form`\n    border-radius: 15px;\n    margin-top: 100px;\n    padding: 5px;\n    display: flex;\n    justify-content: space-between;\n    background-image: linear-gradient(\n        65deg,\n        rgb(17, 236, 229) 30%,\n        rgb(195, 27, 226) 114%\n    );\n    button {\n        height: 30px;\n        background-color: transparent;\n        font-size: 20px;\n        color: black;\n    }\n\n    select {\n        background-color: transparent;\n        outline: none;\n        border: none;\n        color: black;\n    }\n\n    input {\n        height: 30px;\n        font-size: 20px;\n        width: 78%;\n        font-size: 30px;\n        border: none;\n        -ms-user-select: none;\n        -moz-user-select: -moz-none;\n        -khtml-user-select: none;\n        -webkit-user-select: none;\n        user-select: none;\n        &:focus {\n            outline: none;\n        }\n    }\n`\n\nfunction CreateToDo () {\n    const {\n        register,\n        formState: { errors },\n        handleSubmit,\n        reset\n    } = useForm<IForm>()\n    const categoryList = useRecoilValue(cateList)\n    const category = useRecoilValue(nowCategory)\n    const [toDoList, setToDoList] = useRecoilState(atomToDoList)\n    function onValid (data: IForm) {\n        const temptToDoList = JSON.parse(JSON.stringify(toDoList))\n        temptToDoList.unshift({\n            toDo: data.toDo,\n            id: Number(new Date()),\n            category\n        })\n        setToDoList(oldToDoList => {\n            return [\n                {\n                    toDo: data.toDo,\n                    id: Number(new Date()),\n                    category\n                },\n                ...oldToDoList\n            ]\n        })\n\n        localStorage.setItem('todoList', JSON.stringify(temptToDoList))\n        reset({ toDo: '' })\n    }\n    const [selectedCategory, setSelectedCategory] = useRecoilState(nowCategory)\n    function onInput (event: React.FormEvent<HTMLSelectElement>) {\n        const {\n            currentTarget: { value }\n        } = event\n        setSelectedCategory(value as any)\n    }\n    return (\n        <>\n            <Form onSubmit={handleSubmit(onValid)}>\n                <select onInput={onInput} value={selectedCategory}>\n                    {categoryList.map((cate, idx) => {\n                        return (\n                            <option key={idx} value={cate}>\n                                {cate}\n                            </option>\n                        )\n                    })}\n                </select>\n                <input\n                    type='text'\n                    {...register('toDo', {\n                        required: 'input a todo.'\n                    })}\n                ></input>\n                <button>등록</button>\n            </Form>\n            <ErrMsg>{errors.toDo && errors.toDo.message}</ErrMsg>\n        </>\n    )\n}\n\nexport default CreateToDo\n","import { useForm } from 'react-hook-form'\nimport { useRecoilState } from 'recoil'\nimport styled from 'styled-components'\nimport { cateList } from '../Atom'\nimport { ErrMsg, Form } from './CreateToDo'\n\ninterface iCategory {\n    category: string\n}\n\nconst Title = styled.h1`\n    width: 60px;\n`\nfunction CreateCategory () {\n    const {\n        register,\n        formState: { errors },\n        reset,\n        handleSubmit\n    } = useForm<iCategory>()\n    const [sCateList, setCateList] = useRecoilState(cateList)\n    function saveLocalStorage (newCategory: string) {\n        const tmpCategoryList = JSON.parse(JSON.stringify(sCateList))\n        tmpCategoryList.unshift(newCategory)\n        localStorage.setItem('categoryList', JSON.stringify(tmpCategoryList))\n    }\n    function onSaveCategory ({ category }: iCategory) {\n        setCateList(oldList => {\n            return [category, ...oldList]\n        })\n        saveLocalStorage(category)\n        reset({ category: '' })\n    }\n    return (\n        <>\n            <Form onSubmit={handleSubmit(onSaveCategory)}>\n                <Title>Category Create</Title>\n                <input\n                    type='text'\n                    placeholder='custom category create.'\n                    {...register('category', { required: 'input a category.' })}\n                />\n                <button>등록</button>\n            </Form>\n            <ErrMsg> {errors.category && errors.category.message}</ErrMsg>\n        </>\n    )\n}\n\nexport default CreateCategory\n","import { useRecoilState, useRecoilValue } from 'recoil'\nimport styled from 'styled-components'\nimport { leftCategory, nowCategory, rightCategory } from '../Atom'\nexport const Title = styled.h1`\n    font-size: 40px;\n    color: #2cffff;\n    text-align: center;\n    margin: 30px 0;\n`\nconst HeaderWrap = styled.header`\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n    align-item: center;\n`\n\nconst Button = styled.button`\n    color: ${props => (props.disabled ? 'gray' : 'white')};\n    cursor: ${props => (props.disabled ? 'default' : 'pointer')};\n    &:hover {\n        color: ${props => (props.disabled ? 'gray' : 'rgb(17, 236, 229)')};\n    }\n`\n\nfunction Header () {\n    const [sNowCategory, setSelectedCategory] = useRecoilState(nowCategory)\n    // const sLeftCategory = useRecoilValue(leftCategory)\n    // const sRightCategory = useRecoilValue(rightCategory)\n    // function onClick (category: string) {\n    //     setSelectedCategory(category)\n    // }\n\n    return (\n        <HeaderWrap>\n            {/* {\n                <Button\n                    disabled={sNowCategory === Categories.TO_DO}\n                    onClick={() => onClick(sLeftCategory)}\n                >\n                    &larr;\n                </Button>\n            } */}\n\n            <Title>{sNowCategory} List</Title>\n            {/* {\n                <Button\n                    disabled={sNowCategory === Categories.DONE}\n                    onClick={() => onClick(sRightCategory)}\n                >\n                    &rarr;\n                </Button>\n            } */}\n        </HeaderWrap>\n    )\n}\n\nexport default Header\n","import { useRecoilState, useRecoilValue } from 'recoil'\nimport styled from 'styled-components'\nimport { atomToDoList, cateList, IForm, selectedList } from '../Atom'\nimport Header from './Header'\n\nconst ToDoListWrap = styled.ul`\n    color: whitesmoke;\n`\nconst ToDo = styled.li`\n    background-color: black;\n    border-radius: 15px;\n    padding: 10px;\n    margin: 10px 0;\n    color: rgb(146, 171, 207);\n    display: grid;\n    grid-template-columns: 9fr 1fr;\n    align-items: center;\n    &:hover {\n        background-color: #111c2e;\n        color: white;\n    }\n`\nconst Button = styled.button`\n    background-color: #2cffff;\n    border-radius: 20px;\n    width: 60px;\n    color: black;\n    padding: 4px;\n    font-size: 10px;\n    font-weight: 900;\n    z-index: 9;\n    margin: 4px;\n`\nconst ButtonWrap = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n`\nfunction ToDoListPresent () {\n    const categoryList = useRecoilValue(cateList)\n    const [toDoList, setToDoList] = useRecoilState(atomToDoList)\n    function onClickChangeCategory (aId: number, aCategory: IForm['category']) {\n        const tempToDoList = JSON.parse(JSON.stringify(toDoList))\n        const matchIndex = toDoList.findIndex(todo => todo.id === aId)\n        const changedToDo = JSON.parse(JSON.stringify(tempToDoList[matchIndex]))\n        changedToDo.category = aCategory\n        tempToDoList.splice(matchIndex, 1, changedToDo)\n        localStorage.setItem('todoList', JSON.stringify(tempToDoList))\n        setToDoList(tempToDoList)\n    }\n    const showList = useRecoilValue(selectedList)\n    return (\n        <>\n            <Header />\n            <ToDoListWrap>\n                {showList.map(item => (\n                    <ToDo key={item.id}>\n                        {item.toDo}\n                        <ButtonWrap>\n                            {categoryList.map((cate, idx) => {\n                                if (item.category !== cate) {\n                                    return (\n                                        <Button\n                                            key={idx}\n                                            onClick={() =>\n                                                onClickChangeCategory(\n                                                    item.id,\n                                                    cate\n                                                )\n                                            }\n                                        >\n                                            {cate}\n                                        </Button>\n                                    )\n                                }\n                                return null\n                            })}\n                            {/* {item.category === 'TO_DO' ? null : (\n                                <Button\n                                    onClick={() =>\n                                        onClickChangeCategory(item.id, 'TO_DO')\n                                    }\n                                >\n                                    TODO\n                                </Button>\n                            )}\n                            {item.category === 'DOING' ? null : (\n                                <Button\n                                    onClick={() =>\n                                        onClickChangeCategory(item.id, 'DOING')\n                                    }\n                                >\n                                    DOING\n                                </Button>\n                            )}\n                            {item.category === 'DONE' ? null : (\n                                <Button\n                                    onClick={() =>\n                                        onClickChangeCategory(item.id, 'DONE')\n                                    }\n                                >\n                                    DONE\n                                </Button>\n                            )} */}\n                        </ButtonWrap>\n                    </ToDo>\n                ))}\n            </ToDoListWrap>\n        </>\n    )\n}\n\nexport default ToDoListPresent\n","import { useSetRecoilState } from 'recoil'\nimport styled from 'styled-components'\nimport { atomToDoList, cateList } from '../Atom'\nimport CreateCategory from './CreateCategory'\nimport CreateToDo from './CreateToDo'\nimport ToDoListPresent from './ToDoListPresent'\n\nconst Container = styled.div`\n    max-width: 600px;\n    margin: 0 auto;\n`\nfunction RecoilToDoList () {\n    const setToDoList = useSetRecoilState(atomToDoList)\n    const setCateList = useSetRecoilState(cateList)\n    const toDoList = localStorage.getItem('todoList')\n    setToDoList(JSON.parse(toDoList || '[]')) // JSON.parse는 string만을 매개변수로 받는다. null 안 된다.\n    const categoryList = JSON.parse(\n        localStorage.getItem('categoryList') || '[\"TO_DO\",\"DOING\", \"DONE\"]'\n    )\n    setCateList(categoryList)\n\n    return (\n        <Container>\n            <CreateCategory />\n            <CreateToDo />\n            <ToDoListPresent />\n        </Container>\n    )\n}\n\nexport default RecoilToDoList\n","import { createGlobalStyle } from 'styled-components'\nimport RecoilToDoList from './components/RecoilToDoList'\n// import RhfToDoForm from './components/RhfToDoForm'\n// import ToDoList from './components/ToDoList'\n\nconst GlobalStyle = createGlobalStyle`\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n  background: ${props => props.theme.bgColor};\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\nbutton {\n\tfont-size: 40px;\n\tbackground-color: transparent;\n\tcolor: white;\n\tborder: none;\n\toutline: none;\n\tcursor: pointer;\n}\n`\nfunction App () {\n    return (\n        <>\n            <GlobalStyle />\n            {/* <ToDoList /> */}\n            {/* <RhfToDoForm /> */}\n            <RecoilToDoList />\n        </>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ThemeProvider } from 'styled-components'\nimport { darkMode, lightMode } from './theme'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n    <React.StrictMode>\n        <RecoilRoot>\n            <ThemeProvider theme={darkMode}>\n                <App />\n            </ThemeProvider>\n        </RecoilRoot>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n","import { DefaultTheme } from \"styled-components\";\nexport const darkMode: DefaultTheme = {\n    textColor: '#f1f2f6',\n    bgColor: '#2f3542',\n}\n\nexport const lightMode: DefaultTheme = {\n    textColor: '#2f3542',\n    bgColor: '#dfe4ea',\n}"],"sourceRoot":""}