{"version":3,"sources":["Atom.ts","components/CreateToDo.tsx","components/Header.tsx","components/ToDoListPresent.tsx","components/RecoilToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","atomToDoList","atom","key","default","nowCategory","TO_DO","selectedList","selector","get","selectedCategory","filter","todo","category","leftCategory","DONE","DOING","rightCategory","Input","styled","input","ErrMsg","span","Button","button","Select","select","From","form","CreateToDo","useForm","register","errors","formState","handleSubmit","reset","useRecoilState","toDoList","setToDoList","useRecoilValue","setSelectedCategory","onSubmit","data","temptToDoList","JSON","parse","stringify","unshift","toDo","id","Number","Date","oldToDoList","localStorage","setItem","onInput","event","value","currentTarget","type","required","message","Title","h1","HeaderWrap","header","props","disabled","Header","sNowCategory","sLeftCategory","sRightCategory","onClick","ToDoListWrap","ul","ToDo","li","ButtonWrap","div","ToDoListPresent","onClickChangeCategory","aId","aCategory","tempToDoList","matchIndex","findIndex","changedToDo","splice","showList","map","item","Container","RecoilToDoList","useSetRecoilState","getItem","GlobalStyle","createGlobalStyle","theme","bgColor","App","ReactDOM","render","StrictMode","textColor","document","getElementById"],"mappings":"4GACYA,E,gEAAAA,K,cAAAA,E,cAAAA,E,aAAAA,M,KAWL,I,UAAMC,EAAeC,YAAc,CACtCC,IAAK,WACLC,QAAS,KAGAC,EAAcH,YAAiB,CACxCC,IAAK,WACLC,QAASJ,EAAWM,QAEXC,EAAeC,YAAS,CACjCL,IAAK,eACLM,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACEC,EAAmBD,EAAIJ,GAC7B,OAAOI,EAAIR,GAAcU,QACrB,SAAAC,GAAI,OAAIA,EAAKC,WAAaH,QAKzBI,EAAeN,YAAS,CACjCL,IAAK,eACLM,IAAK,YAED,OAAOA,EAFO,EAAVA,KAEOJ,KAAiBL,EAAWe,KACjCf,EAAWgB,MACXhB,EAAWM,SAIZW,EAAgBT,YAAS,CAClCL,IAAK,gBACLM,IAAK,YAED,OAAOA,EAFO,EAAVA,KAEOJ,KAAiBL,EAAWM,MACjCN,EAAWgB,MACXhB,EAAWe,Q,oCC1CnBG,EAAQC,IAAOC,MAAV,kUAeLC,EAASF,IAAOG,KAAV,kHAMNC,EAASJ,IAAOK,OAAV,4HAMNC,EAASN,IAAOO,OAAV,0HAMNC,EAAOR,IAAOS,KAAV,4RAyEKC,I,MAAAA,EA5Df,WACI,MAKIC,cAJAC,EADJ,EACIA,SACaC,EAFjB,EAEIC,UAAaD,OACbE,EAHJ,EAGIA,aACAC,EAJJ,EAIIA,MAGJ,EAAgCC,YAAenC,GAA/C,mBAAOoC,EAAP,KAAiBC,EAAjB,KACMzB,EAAW0B,YAAelC,GAsBhC,EAAgD+B,YAAe/B,GAA/D,mBAAOK,EAAP,KAAyB8B,EAAzB,KAOA,OACI,qCACI,eAACb,EAAD,CAAMc,SAAUP,GA9BxB,SAAkBQ,GACd,IAAMC,EAAgBC,KAAKC,MAAMD,KAAKE,UAAUT,IAChDM,EAAcI,QAAQ,CAClBC,KAAMN,EAAKM,KACXC,GAAIC,OAAO,IAAIC,MACftC,aAEJyB,GAAY,SAAAc,GACR,MAAM,CACF,CACIJ,KAAMN,EAAKM,KACXC,GAAIC,OAAO,IAAIC,MACftC,aAJR,mBAMOuC,OAIXC,aAAaC,QAAQ,WAAYV,KAAKE,UAAUH,IAChDR,EAAM,CAAEa,KAAM,QAWV,UACI,eAACvB,EAAD,CAAQ8B,QATpB,SAAkBC,GACd,IACqBC,EACjBD,EADAE,cAAiBD,MAErBjB,EAAoBiB,IAKcA,MAAO/C,EAAjC,UACI,wBAAQ+C,MAAOzD,EAAWM,MAA1B,kBACA,wBAAQmD,MAAOzD,EAAWgB,MAA1B,mBACA,wBAAQyC,MAAOzD,EAAWe,KAA1B,qBAEJ,cAACG,EAAD,aACIyC,KAAK,QACD5B,EAAS,OAAQ,CACjB6B,SAAU,oBAIlB,cAACrC,EAAD,8BAEJ,cAACF,EAAD,UAASW,EAAOgB,MAAQhB,EAAOgB,KAAKa,cCvG1CC,EAAQ3C,IAAO4C,GAAV,qHAMLC,EAAa7C,IAAO8C,OAAV,gIAOV1C,EAASJ,IAAOK,OAAV,0GACC,SAAA0C,GAAK,OAAKA,EAAMC,SAAW,OAAS,WACnC,SAAAD,GAAK,OAAKA,EAAMC,SAAW,UAAY,aAEpC,SAAAD,GAAK,OAAKA,EAAMC,SAAW,OAAS,uBAoCtCC,I,QAAAA,EAhCf,WACI,MAA4ChC,YAAe/B,GAA3D,mBAAOgE,EAAP,KAAqB7B,EAArB,KACM8B,EAAgB/B,YAAezB,GAC/ByD,EAAiBhC,YAAetB,GACtC,SAASuD,EAAS3D,GACd2B,EAAoB3B,GAGxB,OACI,eAACmD,EAAD,WAEQ,cAAC,EAAD,CACIG,SAAUE,IAAiBrE,EAAWM,MACtCkE,QAAS,kBAAMA,EAAQF,IAF3B,oBAQJ,eAACR,EAAD,WAAQO,EAAR,WAEI,cAAC,EAAD,CACIF,SAAUE,IAAiBrE,EAAWe,KACtCyD,QAAS,kBAAMA,EAAQD,IAF3B,wBCxCVE,EAAetD,IAAOuD,GAAV,oDAIZC,EAAOxD,IAAOyD,GAAV,iUAeJrD,EAASJ,IAAOK,OAAV,8NAYNqD,EAAa1D,IAAO2D,IAAV,kHAqEDC,I,EAAAA,EAhEf,WACI,MAAgC3C,YAAenC,GAA/C,mBAAOoC,EAAP,KAAiBC,EAAjB,KACA,SAAS0C,EAAuBC,EAAaC,GACzC,IAAMC,EAAevC,KAAKC,MAAMD,KAAKE,UAAUT,IACzC+C,EAAa/C,EAASgD,WAAU,SAAAzE,GAAI,OAAIA,EAAKqC,KAAOgC,KACpDK,EAAc1C,KAAKC,MAAMD,KAAKE,UAAUqC,EAAaC,KAC3DE,EAAYzE,SAAWqE,EACvBC,EAAaI,OAAOH,EAAY,EAAGE,GACnCjC,aAAaC,QAAQ,WAAYV,KAAKE,UAAUqC,IAChD7C,EAAY6C,GAEhB,IAAMK,EAAWjD,YAAehC,GAChC,OACI,qCACI,cAAC,EAAD,IACA,cAACkE,EAAD,UACKe,EAASC,KAAI,SAAAC,GAAI,OACd,eAACf,EAAD,WACKe,EAAK1C,KACN,eAAC6B,EAAD,WACKa,EAAK7E,WAAab,EAAWM,MAAQ,KAClC,cAAC,EAAD,CACIkE,QAAS,kBACLQ,EACIU,EAAKzC,GACLjD,EAAWM,QAJvB,kBAWHoF,EAAK7E,WAAab,EAAWgB,MAAQ,KAClC,cAAC,EAAD,CACIwD,QAAS,kBACLQ,EACIU,EAAKzC,GACLjD,EAAWgB,QAJvB,mBAWH0E,EAAK7E,WAAab,EAAWe,KAAO,KACjC,cAAC,EAAD,CACIyD,QAAS,kBACLQ,EACIU,EAAKzC,GACLjD,EAAWe,OAJvB,uBA5BD2E,EAAKzC,aCpD9B0C,EAAYxE,IAAO2D,IAAV,wEAiBAc,I,EAAAA,EAbf,WACI,IAAMtD,EAAcuD,YAAkB5F,GAChCoC,EAAWgB,aAAayC,QAAQ,YAGtC,OADAxD,EAAYM,KAAKC,MAAMR,GAAY,OAE/B,eAACsD,EAAD,WACI,cAAC,EAAD,IACA,cAAC,EAAD,QCbNI,EAAcC,YAAH,qtCA4BD,SAAA9B,GAAK,OAAIA,EAAM+B,MAAMC,WAsCtBC,MAXf,WACI,OACI,qCACI,cAACJ,EAAD,IAGA,cAAC,EAAD,QC3DZK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAeL,MCTW,CAClCM,UAAW,UACXL,QAAS,WDOD,SACI,cAAC,EAAD,UAIZM,SAASC,eAAe,W","file":"static/js/main.5392bcaa.chunk.js","sourcesContent":["import { atom, selector } from 'recoil'\nexport enum Categories {\n    'TO_DO' = 'TO_DO',\n    'DOING' = 'DOING',\n    'DONE' = 'DONE'\n}\nexport interface IForm {\n    toDo: string\n    id: number\n    category: Categories\n}\n\nexport const atomToDoList = atom<IForm[]>({\n    key: 'ToDoList',\n    default: []\n})\n\nexport const nowCategory = atom<Categories>({\n    key: 'category',\n    default: Categories.TO_DO\n})\nexport const selectedList = selector({\n    key: 'categoryList',\n    get: ({ get }) => {\n        const selectedCategory = get(nowCategory)\n        return get(atomToDoList).filter(\n            todo => todo.category === selectedCategory\n        )\n    }\n})\n\nexport const leftCategory = selector({\n    key: 'leftCategory',\n    get: ({ get }) => {\n        /* < 가 보일 때는 DONE과 DOING일 경우이다. */\n        return get(nowCategory) === Categories.DONE\n            ? Categories.DOING\n            : Categories.TO_DO\n    }\n})\n\nexport const rightCategory = selector({\n    key: 'rightCategory',\n    get: ({ get }) => {\n        // >가 보일 때는 TODO와 DOING이다.\n        return get(nowCategory) === Categories.TO_DO\n            ? Categories.DOING\n            : Categories.DONE\n    }\n})\n","import { useForm } from 'react-hook-form'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport styled from 'styled-components'\nimport { atomToDoList, Categories, IForm, nowCategory } from '../Atom'\n\nconst Input = styled.input`\n    height: 30px;\n    font-size: 20px;\n    width: 78%;\n    font-size: 30px;\n    border: none;\n    -ms-user-select: none;\n    -moz-user-select: -moz-none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    user-select: none;\n    &:focus {\n        outline: none;\n    }\n`\nconst ErrMsg = styled.span`\n    width: 100%;\n    color: #fc427b;\n    text-align: center;\n    font-size: 20px;\n`\nconst Button = styled.button`\n    height: 30px;\n    background-color: transparent;\n    font-size: 20px;\n    color: black;\n`\nconst Select = styled.select`\n    background-color: transparent;\n    outline: none;\n    border: none;\n    color: black;\n`\nconst From = styled.form`\n    border-radius: 15px;\n    margin-top: 100px;\n    padding: 5px 0;\n    display: flex;\n    justify-content: space-between;\n    background-image: linear-gradient(\n        65deg,\n        rgb(17, 236, 229) 30%,\n        rgb(195, 27, 226) 114%\n    );\n`\n\nfunction CreateToDo () {\n    const {\n        register,\n        formState: { errors },\n        handleSubmit,\n        reset\n    } = useForm<IForm>()\n\n    const [toDoList, setToDoList] = useRecoilState(atomToDoList)\n    const category = useRecoilValue(nowCategory)\n    function onValid (data: IForm) {\n        const temptToDoList = JSON.parse(JSON.stringify(toDoList))\n        temptToDoList.unshift({\n            toDo: data.toDo,\n            id: Number(new Date()),\n            category\n        })\n        setToDoList(oldToDoList => {\n            return [\n                {\n                    toDo: data.toDo,\n                    id: Number(new Date()),\n                    category\n                },\n                ...oldToDoList\n            ]\n        })\n\n        localStorage.setItem('todoList', JSON.stringify(temptToDoList))\n        reset({ toDo: '' })\n    }\n    const [selectedCategory, setSelectedCategory] = useRecoilState(nowCategory)\n    function onInput (event: React.FormEvent<HTMLSelectElement>) {\n        const {\n            currentTarget: { value }\n        } = event\n        setSelectedCategory(value as any)\n    }\n    return (\n        <>\n            <From onSubmit={handleSubmit(onValid)}>\n                <Select onInput={onInput} value={selectedCategory}>\n                    <option value={Categories.TO_DO}>TODO</option>\n                    <option value={Categories.DOING}>DOING</option>\n                    <option value={Categories.DONE}>DONE</option>\n                </Select>\n                <Input\n                    type='text'\n                    {...register('toDo', {\n                        required: 'input a todo.'\n                    })}\n                ></Input>\n\n                <Button>등록</Button>\n            </From>\n            <ErrMsg>{errors.toDo && errors.toDo.message}</ErrMsg>\n        </>\n    )\n}\n\nexport default CreateToDo\n","import { useRecoilState, useRecoilValue } from 'recoil'\nimport styled from 'styled-components'\nimport { Categories, leftCategory, nowCategory, rightCategory } from '../Atom'\nconst Title = styled.h1`\n    font-size: 40px;\n    color: #2cffff;\n    text-align: center;\n    margin: 30px 0;\n`\nconst HeaderWrap = styled.header`\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n    align-item: center;\n`\n\nconst Button = styled.button`\n    color: ${props => (props.disabled ? 'gray' : 'white')};\n    cursor: ${props => (props.disabled ? 'default' : 'pointer')};\n    &:hover {\n        color: ${props => (props.disabled ? 'gray' : 'rgb(17, 236, 229)')};\n    }\n`\n\nfunction Header () {\n    const [sNowCategory, setSelectedCategory] = useRecoilState(nowCategory)\n    const sLeftCategory = useRecoilValue(leftCategory)\n    const sRightCategory = useRecoilValue(rightCategory)\n    function onClick (category: Categories) {\n        setSelectedCategory(category)\n    }\n\n    return (\n        <HeaderWrap>\n            {\n                <Button\n                    disabled={sNowCategory === Categories.TO_DO}\n                    onClick={() => onClick(sLeftCategory)}\n                >\n                    &larr;\n                </Button>\n            }\n\n            <Title>{sNowCategory} List</Title>\n            {\n                <Button\n                    disabled={sNowCategory === Categories.DONE}\n                    onClick={() => onClick(sRightCategory)}\n                >\n                    &rarr;\n                </Button>\n            }\n        </HeaderWrap>\n    )\n}\n\nexport default Header\n","import { useRecoilState, useRecoilValue } from 'recoil'\nimport styled from 'styled-components'\nimport { atomToDoList, Categories, selectedList } from '../Atom'\nimport Header from './Header'\n\nconst ToDoListWrap = styled.ul`\n    color: whitesmoke;\n`\n\nconst ToDo = styled.li`\n    background-color: black;\n    border-radius: 15px;\n    padding: 10px;\n    margin: 10px 0;\n    color: rgb(146, 171, 207);\n    display: grid;\n    grid-template-columns: 9fr 1fr;\n    align-items: center;\n    &:hover {\n        background-color: #111c2e;\n        color: white;\n    }\n`\n\nconst Button = styled.button`\n    background-color: #2cffff;\n    border-radius: 20px;\n    width: 60px;\n    color: black;\n    padding: 4px;\n    font-size: 10px;\n    font-weight: 900;\n    z-index: 9;\n    margin: 4px;\n`\n\nconst ButtonWrap = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n`\nfunction ToDoListPresent () {\n    const [toDoList, setToDoList] = useRecoilState(atomToDoList)\n    function onClickChangeCategory (aId: number, aCategory: Categories) {\n        const tempToDoList = JSON.parse(JSON.stringify(toDoList))\n        const matchIndex = toDoList.findIndex(todo => todo.id === aId)\n        const changedToDo = JSON.parse(JSON.stringify(tempToDoList[matchIndex]))\n        changedToDo.category = aCategory\n        tempToDoList.splice(matchIndex, 1, changedToDo)\n        localStorage.setItem('todoList', JSON.stringify(tempToDoList))\n        setToDoList(tempToDoList)\n    }\n    const showList = useRecoilValue(selectedList)\n    return (\n        <>\n            <Header />\n            <ToDoListWrap>\n                {showList.map(item => (\n                    <ToDo key={item.id}>\n                        {item.toDo}\n                        <ButtonWrap>\n                            {item.category === Categories.TO_DO ? null : (\n                                <Button\n                                    onClick={() =>\n                                        onClickChangeCategory(\n                                            item.id,\n                                            Categories.TO_DO\n                                        )\n                                    }\n                                >\n                                    TODO\n                                </Button>\n                            )}\n                            {item.category === Categories.DOING ? null : (\n                                <Button\n                                    onClick={() =>\n                                        onClickChangeCategory(\n                                            item.id,\n                                            Categories.DOING\n                                        )\n                                    }\n                                >\n                                    DOING\n                                </Button>\n                            )}\n                            {item.category === Categories.DONE ? null : (\n                                <Button\n                                    onClick={() =>\n                                        onClickChangeCategory(\n                                            item.id,\n                                            Categories.DONE\n                                        )\n                                    }\n                                >\n                                    DONE\n                                </Button>\n                            )}\n                        </ButtonWrap>\n                    </ToDo>\n                ))}\n            </ToDoListWrap>\n        </>\n    )\n}\n\nexport default ToDoListPresent\n","import { useSetRecoilState } from 'recoil'\nimport styled from 'styled-components'\nimport { atomToDoList } from '../Atom'\nimport CreateToDo from './CreateToDo'\nimport ToDoListPresent from './ToDoListPresent'\n\nconst Container = styled.div`\n    max-width: 600px;\n    margin: 0 auto;\n`\nfunction RecoilToDoList () {\n    const setToDoList = useSetRecoilState(atomToDoList)\n    const toDoList = localStorage.getItem('todoList')\n\n    setToDoList(JSON.parse(toDoList || '[]')) // JSON.parse는 string만을 매개변수로 받는다. null 안 된다.\n    return (\n        <Container>\n            <CreateToDo />\n            <ToDoListPresent />\n        </Container>\n    )\n}\n\nexport default RecoilToDoList\n","import { createGlobalStyle } from 'styled-components'\nimport RecoilToDoList from './components/RecoilToDoList'\n// import RhfToDoForm from './components/RhfToDoForm'\n// import ToDoList from './components/ToDoList'\n\nconst GlobalStyle = createGlobalStyle`\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n  background: ${props => props.theme.bgColor};\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\nbutton {\n\tfont-size: 40px;\n\tbackground-color: transparent;\n\tcolor: white;\n\tborder: none;\n\toutline: none;\n\tcursor: pointer;\n}\n`\nfunction App () {\n    return (\n        <>\n            <GlobalStyle />\n            {/* <ToDoList /> */}\n            {/* <RhfToDoForm /> */}\n            <RecoilToDoList />\n        </>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ThemeProvider } from 'styled-components'\nimport { darkMode, lightMode } from './theme'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n    <React.StrictMode>\n        <RecoilRoot>\n            <ThemeProvider theme={darkMode}>\n                <App />\n            </ThemeProvider>\n        </RecoilRoot>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n","import { DefaultTheme } from \"styled-components\";\nexport const darkMode: DefaultTheme = {\n    textColor: '#f1f2f6',\n    bgColor: '#2f3542',\n}\n\nexport const lightMode: DefaultTheme = {\n    textColor: '#2f3542',\n    bgColor: '#dfe4ea',\n}"],"sourceRoot":""}